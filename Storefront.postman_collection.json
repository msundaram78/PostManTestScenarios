{
	"info": {
		"_postman_id": "9c7a5560-8f1e-45a9-ac08-e1d817369a60",
		"name": "Microservice Storefront",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Customers",
			"item": [
				{
					"name": "Get Customers StoreFront",
					"item": [
						{
							"name": "mustChangePasswordFlag Set - False",
							"item": [
								{
									"name": "customers/storefront_SF1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//assert 200 is returned\r",
													"pm.test(\"response is 200\", function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseData = pm.response.json();\r",
													"var userObject = JSON.parse(pm.environment.get(\"StoreFront1\"));\r",
													"\r",
													"//assert firstName\r",
													"pm.test(\"firstName equals \"+ userObject.firstName, function () {\r",
													"    pm.expect(responseData.payer.firstName).to.equal(userObject.firstName);\r",
													"});\r",
													"\r",
													"//assert lastName\r",
													"pm.test(\"lastName equals \"+ userObject.lastName, function () {\r",
													"    pm.expect(responseData.payer.lastName).to.equal(userObject.lastName);\r",
													"});\r",
													"\r",
													"//assert custCode\r",
													"pm.test(\"custCode equals \"+ userObject.custCode, function () {\r",
													"    pm.expect(responseData.payer.custCode).to.equal(userObject.custCode);\r",
													"});\r",
													"\r",
													"//assert email\r",
													"pm.test(\"email is \" + userObject.email, function () {\r",
													"    pm.expect(responseData.payer.email).to.equal(userObject.email);\r",
													"});\r",
													"\r",
													"//assert logintype\r",
													"pm.test(\"logintype equals \" + userObject.logintype, function () {\r",
													"    pm.expect(responseData.payer.loginType).to.equal(userObject.logintype);\r",
													"});\r",
													"\r",
													"//assert mustChangePasswordFlag\r",
													"pm.test(\"mustChangePasswordFlag is false\", function () {\r",
													"    pm.expect(responseData.payer.mustChangePasswordFlag).to.be.false;\r",
													"});\r",
													"\r",
													"pm.environment.unset(\"getStorefrontUser\");\r",
													"pm.environment.unset(\"storefrontSiteToken\");\r",
													"pm.environment.unset(\"storefrontToken\");\r",
													"pm.environment.unset(\"storefrontSiteToken_url\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//launch storefront with \r",
													"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront1\",\"storefrontVirtual1\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers/storefront",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{codeVersion}}",
												"api",
												"payer",
												"1.0",
												"customers",
												"storefront"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "mustChangePasswordFlag Set - True",
							"item": [
								{
									"name": "customers/storefront_SF2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//assert 200 is returned\r",
													"pm.test(\"response is 200\", function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseData = pm.response.json();\r",
													"var userObject = JSON.parse(pm.environment.get(\"StoreFront2\"));\r",
													"\r",
													"//assert firstName\r",
													"pm.test(\"firstName equals \"+ userObject.firstName, function () {\r",
													"    pm.expect(responseData.payer.firstName).to.equal(userObject.firstName);\r",
													"});\r",
													"\r",
													"//assert lastName\r",
													"pm.test(\"lastName equals \"+ userObject.lastName, function () {\r",
													"    pm.expect(responseData.payer.lastName).to.equal(userObject.lastName);\r",
													"});\r",
													"\r",
													"//assert custCode\r",
													"pm.test(\"custCode equals \"+ userObject.custCode, function () {\r",
													"    pm.expect(responseData.payer.custCode).to.equal(userObject.custCode);\r",
													"});\r",
													"\r",
													"//assert email\r",
													"pm.test(\"email is \" + userObject.email, function () {\r",
													"    pm.expect(responseData.payer.email).to.equal(userObject.email);\r",
													"});\r",
													"\r",
													"//assert logintype\r",
													"pm.test(\"logintype equals \" + userObject.logintype, function () {\r",
													"    pm.expect(responseData.payer.loginType).to.equal(userObject.logintype);\r",
													"});\r",
													"\r",
													"//assert mustChangePasswordFlag\r",
													"pm.test(\"mustChangePasswordFlag is true\", function () {\r",
													"    pm.expect(responseData.payer.mustChangePasswordFlag).to.be.true;\r",
													"});\r",
													"\r",
													"pm.environment.unset(\"guest\");\r",
													"pm.environment.unset(\"getTokenUser\");\r",
													"pm.environment.unset(\"token_url\");\r",
													"pm.environment.unset(\"currentUser\");\r",
													"pm.environment.unset(\"currentClient\");\r",
													"pm.environment.unset(\"accessToken\");\r",
													"pm.environment.unset(\"storefrontSiteToken_url\");\r",
													"pm.environment.unset(\"getStorefrontUser\");\r",
													"pm.environment.unset(\"storefrontToken\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//launch storefront with \r",
													"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront2\",\"storefrontVirtual1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://train-qa.cashnut.net/cashneti/api/payer/1.0/customers/storefront",
											"protocol": "https",
											"host": [
												"train-qa",
												"cashnut",
												"net"
											],
											"path": [
												"cashneti",
												"api",
												"payer",
												"1.0",
												"customers",
												"storefront"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Post Customers",
					"item": [
						{
							"name": "AT016UUID_Workflow",
							"item": [
								{
									"name": "Login Optional",
									"item": [
										{
											"name": "Create a Customer with valid data and Merchant set to 'Login Optional'",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//call get token for user and client code\r",
															"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront3\",\"storefrontVirtual1\");\r",
															"\r",
															"//generate random id\r",
															"var uuid = require('uuid');\r",
															"var myUUID = uuid.v4();\r",
															"\r",
															"const userId = \"AT016\" + (myUUID)+\"@gmail.com\";\r",
															"console.log (userId);\r",
															"pm.collectionVariables.set(\"customerEmail\",userId);\r",
															"\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront3\"));\r",
															"\r",
															"pm.variables.set(\"firstName\", userObject.firstName);\r",
															"pm.variables.set(\"lastName\", userObject.lastName);\r",
															"pm.variables.set(\"password\", userObject.password);\r",
															"pm.variables.set(\"emailAddress\", pm.collectionVariables.get(\"customerEmail\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200 is returned\r",
															"pm.test(\"Response is 200\", function () {\r",
															"   pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//Verify response is empty\r",
															"pm.test(\"Validate Create customer response is empty\", function () {\r",
															"    pm.response.to.have.body(\"\");\r",
															"});\r",
															"\r",
															"//Unset email\r",
															"pm.collectionVariables.unset(\"customerEmail\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"payer\": {\r\n        \"emailAddress\": \"{{emailAddress}}\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"password\": \"{{password}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a Customer without email address",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//generate random id\r",
															"var uuid = require('uuid');\r",
															"var myUUID = uuid.v4();\r",
															"\r",
															"const userId = \"AT016\" + (myUUID)+\"@gmail.com\";\r",
															"console.log (userId);\r",
															"pm.collectionVariables.set(\"customerEmail\",userId);\r",
															"\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront3\"));\r",
															"\r",
															"\r",
															"pm.variables.set(\"firstName\", userObject.firstName);\r",
															"pm.variables.set(\"lastName\", userObject.lastName);\r",
															"pm.variables.set(\"password\", userObject.password);\r",
															"pm.variables.set(\"emailAddress\", pm.collectionVariables.get(\"customerEmail\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 400 is returned\r",
															"pm.test(\"Response is 400\", function () {\r",
															"   pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 400\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(400);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is 230\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"230\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Email required'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"Email required\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"correlationId is null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															"\r",
															"//Unset email\r",
															"pm.collectionVariables.unset(\"customerEmail\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"payer\": {\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"password\": \"{{password}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a Customer without First Name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//generate random id\r",
															"var uuid = require('uuid');\r",
															"var myUUID = uuid.v4();\r",
															"\r",
															"const userId = \"AT016\" + (myUUID)+\"@gmail.com\";\r",
															"console.log (userId);\r",
															"pm.collectionVariables.set(\"customerEmail\",userId);\r",
															"\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront3\"));\r",
															"\r",
															"\r",
															"pm.variables.set(\"firstName\", userObject.firstName);\r",
															"pm.variables.set(\"lastName\", userObject.lastName);\r",
															"pm.variables.set(\"password\", userObject.password);\r",
															"pm.variables.set(\"emailAddress\", pm.collectionVariables.get(\"customerEmail\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 400 is returned\r",
															"pm.test(\"Response is 400\", function () {\r",
															"   pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 400\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(400);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is 230\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"230\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'First name required'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"First name required\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"correlationId is null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															"\r",
															"//Unset email\r",
															"pm.collectionVariables.unset(\"customerEmail\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"payer\": {\r\n        \"emailAddress\": \"{{emailAddress}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"password\": \"{{password}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a Customer without Last Name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//generate random id\r",
															"var uuid = require('uuid');\r",
															"var myUUID = uuid.v4();\r",
															"\r",
															"const userId = \"AT016\" + (myUUID)+\"@gmail.com\";\r",
															"console.log (userId);\r",
															"pm.collectionVariables.set(\"customerEmail\",userId);\r",
															"\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront3\"));\r",
															"\r",
															"\r",
															"pm.variables.set(\"firstName\", userObject.firstName);\r",
															"pm.variables.set(\"lastName\", userObject.lastName);\r",
															"pm.variables.set(\"password\", userObject.password);\r",
															"pm.variables.set(\"emailAddress\", pm.collectionVariables.get(\"customerEmail\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 400 is returned\r",
															"pm.test(\"Response is 400\", function () {\r",
															"   pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 400\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(400);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is 230\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"230\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Last name required'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"Last name required\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"correlationId is null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															"\r",
															"//Unset email\r",
															"pm.collectionVariables.unset(\"customerEmail\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"payer\": {\r\n        \"emailAddress\": \"{{emailAddress}}\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"password\": \"{{password}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a Customer without Password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//generate random id\r",
															"var uuid = require('uuid');\r",
															"var myUUID = uuid.v4();\r",
															"\r",
															"const userId = \"AT016\" + (myUUID)+\"@gmail.com\";\r",
															"console.log (userId);\r",
															"pm.collectionVariables.set(\"customerEmail\",userId);\r",
															"\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront3\"));\r",
															"\r",
															"\r",
															"pm.variables.set(\"firstName\", userObject.firstName);\r",
															"pm.variables.set(\"lastName\", userObject.lastName);\r",
															"pm.variables.set(\"password\", userObject.password);\r",
															"pm.variables.set(\"emailAddress\", pm.collectionVariables.get(\"customerEmail\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 400 is returned\r",
															"pm.test(\"Response is 400\", function () {\r",
															"   pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 400\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(400);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is 230\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"230\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Password required'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"Password required\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"correlationId is null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															"\r",
															"//Unset email\r",
															"pm.collectionVariables.unset(\"customerEmail\")\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"payer\": {\r\n        \"emailAddress\": \"{{emailAddress}}\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a Customer with existing user id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//generate random id\r",
															"var uuid = require('uuid');\r",
															"var myUUID = uuid.v4();\r",
															"\r",
															"const userId = \"AT016\" + (myUUID)+\"@gmail.com\";\r",
															"console.log (userId);\r",
															"pm.collectionVariables.set(\"customerEmail\",userId);\r",
															"\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront3\"));\r",
															"\r",
															"\r",
															"pm.variables.set(\"firstName\", userObject.firstName);\r",
															"pm.variables.set(\"lastName\", userObject.lastName);\r",
															"pm.variables.set(\"password\", userObject.password);\r",
															"pm.variables.set(\"emailAddress\", userObject.email);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 422 is returned\r",
															"pm.test(\"Response is 422\", function () {\r",
															"   pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 422\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(422);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is CustomerExists\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"CustomerExists\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Customer Already Exists.'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"Customer Already Exists.\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"correlationId is not null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).to.not.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															"\r",
															"//Unset the token and email\r",
															"pm.collectionVariables.unset(\"customerEmail\");\r",
															"pm.environment.unset(\"storefrontSiteToken_url\")\r",
															"pm.environment.unset(\"getStorefrontUser\");\r",
															"pm.environment.unset(\"storefrontToken\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"payer\": {\r\n        \"emailAddress\": \"{{emailAddress}}\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"password\": \"{{password}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Login Requried",
									"item": [
										{
											"name": "Create a Customer with valid data and Merchant set to 'Login Required'",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//call get token for user and client code\r",
															"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront3\",\"storefrontVirtual2\");\r",
															"\r",
															"//generate random id\r",
															"var uuid = require('uuid');\r",
															"var myUUID = uuid.v4();\r",
															"\r",
															"const userId = \"AT016\" + (myUUID)+\"@gmail.com\";\r",
															"console.log (userId);\r",
															"pm.collectionVariables.set(\"customerEmail\",userId);\r",
															"\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront3\"));\r",
															"\r",
															"\r",
															"pm.variables.set(\"firstName\", userObject.firstName);\r",
															"pm.variables.set(\"lastName\", userObject.lastName);\r",
															"pm.variables.set(\"password\", userObject.password);\r",
															"pm.variables.set(\"emailAddress\", pm.collectionVariables.get(\"customerEmail\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200 is returned\r",
															"pm.test(\"Response is 200\", function () {\r",
															"   pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//Verify response is empty\r",
															"pm.test(\"Validate Create customer response is empty\", function () {\r",
															"    pm.response.to.have.body(\"\");\r",
															"});\r",
															"\r",
															"//Unset the token and email\r",
															"pm.collectionVariables.unset(\"customerEmail\");\r",
															"pm.environment.unset(\"storefrontSiteToken_url\")\r",
															"pm.environment.unset(\"getStorefrontUser\");\r",
															"pm.environment.unset(\"storefrontToken\");\r",
															"pm.environment.unset(\"storefrontSiteToken\");\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"payer\": {\r\n        \"emailAddress\": \"{{emailAddress}}\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"password\": \"{{password}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Login Not Available",
									"item": [
										{
											"name": "Create a Customer for Merchant set to 'Login not available'",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//call get token for user and client code\r",
															"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront3\",\"storefrontVirtual3\");\r",
															"\r",
															"//generate random id\r",
															"var uuid = require('uuid');\r",
															"var myUUID = uuid.v4();\r",
															"\r",
															"const userId = \"AT016\" + (myUUID)+\"@gmail.com\";\r",
															"console.log (userId);\r",
															"pm.collectionVariables.set(\"customerEmail\",userId);\r",
															"\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront3\"));\r",
															"\r",
															"\r",
															"pm.variables.set(\"firstName\", userObject.firstName);\r",
															"pm.variables.set(\"lastName\", userObject.lastName);\r",
															"pm.variables.set(\"password\", userObject.password);\r",
															"pm.variables.set(\"emailAddress\", pm.collectionVariables.get(\"customerEmail\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 403 is returned\r",
															"pm.test(\"Response is 403\", function () {\r",
															"   pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 403\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(403);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is notPermitted\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"notPermitted\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Invalid Usertype'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"Invalid Usertype\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"correlationId is not null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).not.to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															"\r",
															"//Unset the token and email\r",
															"pm.collectionVariables.unset(\"customerEmail\");\r",
															"pm.environment.unset(\"storefrontSiteToken_url\")\r",
															"pm.environment.unset(\"getStorefrontUser\");\r",
															"pm.environment.unset(\"storefrontToken\");\r",
															"pm.environment.unset(\"storefrontSiteToken\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"payer\": {\r\n        \"emailAddress\": \"{{emailAddress}}\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"password\": \"{{password}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Put  Customers",
					"item": [
						{
							"name": "StoreFront11_Workflow",
							"item": [
								{
									"name": "Login Optional",
									"item": [
										{
											"name": "PUT - Change password for storefront customers",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//call get token for user and client code\r",
															"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront11\",\"storefrontVirtual1\");\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the  New Password and Old Password\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// assert response\r",
															"pm.test(\"Response is - empty\", function () {\r",
															"    pm.response.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"Payer\":{\r\n      \"newPassword\":\"{{newPassword}}\",\r\n      \"existingPassword\":\"{{password}}\"\r\n   }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST Token - Verify user cannot generate token with existing password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the virtual directory,username,password,newPassword\r",
															"pm.variables.set(\"virtualdirectory1\",userObject.virtual[0]);\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 401 is returned\r",
															"pm.test(\"Response is 401\", function () {\r",
															"   pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 401\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(401);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is InvalidLogin\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"InvalidLogin\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is Unable to login because of invalid username / password.\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"Unable to login because of invalid username / password. \");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"correlationId is  null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).not.to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"virtualdirectory\": \"{{virtualdirectory1}}\",\r\n    \"grant_type\": \"storefront\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"preview\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/auth/1.0/token",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"auth",
														"1.0",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST Token - Verify user can generate token with new password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the virtual directory,username,newPassword\r",
															"pm.variables.set(\"virtualdirectory1\",userObject.virtual[0]);\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.newPassword);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200 is returned\r",
															"pm.test(\"response is 200\", function () {\r",
															"   pm.response.to.have.status(200);\r",
															"});\r",
															"// parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//set token for GET\r",
															"pm.collectionVariables.set(\"newStorefronToken\", responseData.access_token);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"virtualdirectory\": \"{{virtualdirectory1}}\",\r\n    \"grant_type\": \"storefront\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"preview\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/auth/1.0/token",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"auth",
														"1.0",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT - Change password without new password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the username,password,newPassword\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 422 is returned\r",
															"pm.test(\"Response is 422\", function () {\r",
															"   pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 422\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(422);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is notPermitted\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"InvalidPassword\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Invalid Usertype'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"The password is required.\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert correlationId\r",
															"pm.test(\"correlationId is not null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{newStorefronToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"Payer\":{\r\n          \"existingPassword\":\"{{password}}\"\r\n   }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT - Change password without existingPassword",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															" // set the username,password,newPassword\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 422 is returned\r",
															"pm.test(\"Response is 422\", function () {\r",
															"   pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 422\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(422);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is notPermitted\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"InvalidPassword\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Invalid Usertype'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"The password is required.\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert correlationId\r",
															"pm.test(\"correlationId is not null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{newStorefronToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"Payer\":{\r\n         \"newPassword\":\"{{newPassword}}\"\r\n   }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT - Switch to existing password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															" // set the username,password,newPassword\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// assert response is empty\r",
															"pm.test(\"Response is - empty\", function () {\r",
															"    pm.response.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{newStorefronToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"Payer\":{\r\n      \"newPassword\":\"{{password}}\",\r\n      \"existingPassword\":\"{{newPassword}}\"\r\n   }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST Token - Verify user can generate token with existing password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the virtual directory,username,password,newPassword\r",
															"pm.variables.set(\"virtualdirectory1\",userObject.virtual[0]);\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// assert response\r",
															"pm.test(\"Response is - empty\", function () {\r",
															"    pm.response.empty;\r",
															"});\r",
															"//Unset the token and email\r",
															"pm.environment.unset(\"storefrontSiteToken_url\")\r",
															"pm.environment.unset(\"getStorefrontUser\");\r",
															"pm.environment.unset(\"storefrontToken\");\r",
															"pm.environment.unset(\"storefrontSiteToken\");\r",
															"pm.environment.unset(\"newStorefrontToken\");\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"virtualdirectory\": \"{{virtualdirectory1}}\",\r\n    \"grant_type\": \"storefront\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"preview\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/auth/1.0/token",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"auth",
														"1.0",
														"token"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Login Requried",
									"item": [
										{
											"name": "PUT - Change password for storefront customers",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//call get token for user and client code\r",
															"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront11\",\"storefrontVirtual2\");\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the username,pasword,newPassword\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// assert response is empty\r",
															"pm.test(\"Response is - empty\", function () {\r",
															"    pm.response.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"Payer\":{\r\n      \"newPassword\":\"{{newPassword}}\",\r\n      \"existingPassword\":\"{{password}}\"\r\n   }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST Token - Verify user cannot generate token with existing password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the  virtual directory,username,password,newpassword\r",
															"pm.variables.set(\"virtualdirectory1\",userObject.virtual[1]);\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 401 is returned\r",
															"pm.test(\"Response is 401\", function () {\r",
															"   pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 401\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(401);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is InvalidLogin\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"InvalidLogin\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is Unable to login because of invalid username / password.\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"Unable to login because of invalid username / password. \");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"correlationId is  null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).not.to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"virtualdirectory\": \"{{virtualdirectory1}}\",\r\n    \"grant_type\": \"storefront\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"preview\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/auth/1.0/token",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"auth",
														"1.0",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST Token - Verify user can generate token with new password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the  New Password and Old Password\r",
															"pm.variables.set(\"virtualdirectory1\",userObject.virtual[1]);\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.newPassword);\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200 is returned\r",
															"pm.test(\"response is 200\", function () {\r",
															"   pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//set token for GET\r",
															"pm.collectionVariables.set(\"newStorefronToken\", responseData.access_token);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"virtualdirectory\": \"{{virtualdirectory1}}\",\r\n    \"grant_type\": \"storefront\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"preview\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/auth/1.0/token",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"auth",
														"1.0",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT - Change password without new password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the  username,password,newPassword.\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 422 is returned\r",
															"pm.test(\"Response is 422\", function () {\r",
															"   pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 403\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(422);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is notPermitted\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"InvalidPassword\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Invalid Usertype'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"The password is required.\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert correlationId\r",
															"pm.test(\"correlationId is not null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{newStorefronToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"Payer\":{\r\n          \"existingPassword\":\"{{password}}\"\r\n   }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT - Change password without existingPassword",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the  username,password,newPassword.\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 422 is returned\r",
															"pm.test(\"Response is 422\", function () {\r",
															"   pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 403\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(422);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is notPermitted\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"InvalidPassword\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Invalid Usertype'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"The password is required.\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert correlationId\r",
															"pm.test(\"correlationId is not null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{newStorefronToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"Payer\":{\r\n         \"newPassword\":\"{{newPassword}}\"\r\n   }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT - Switch to existing password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the  username,password,newpassword.\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"// assert response is empty\r",
															"pm.test(\"Response is - empty\", function () {\r",
															"    pm.response.empty;\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{newStorefronToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"Payer\":{\r\n      \"newPassword\":\"{{password}}\",\r\n      \"existingPassword\":\"{{newPassword}}\"\r\n   }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST Token - Verify user can generate token with existing password",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the virtual directory,username,password,newPassword\r",
															"pm.variables.set(\"virtualdirectory1\",userObject.virtual[0]);\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"// assert response\r",
															"pm.test(\"Response is - empty\", function () {\r",
															"    pm.response.empty;\r",
															"});\r",
															"//Unset the token and email\r",
															"pm.environment.unset(\"storefrontSiteToken_url\")\r",
															"pm.environment.unset(\"getStorefrontUser\");\r",
															"pm.environment.unset(\"storefrontToken\");\r",
															"pm.environment.unset(\"storefrontSiteToken\");\r",
															"pm.environment.unset(\"newStorefrontToken\");\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"virtualdirectory\": \"{{virtualdirectory1}}\",\r\n    \"grant_type\": \"storefront\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"preview\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/auth/1.0/token",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"auth",
														"1.0",
														"token"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Login Not Available",
									"item": [
										{
											"name": "PUT - Change password for storefront customers",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//call get token for user and client code\r",
															"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront11\",\"storefrontVirtual3\");\r",
															"// parse user data\r",
															"const userObject = JSON.parse(pm.environment.get(\"StoreFront11\"));\r",
															"\r",
															"// set the  New Password and Old Password\r",
															"pm.variables.set(\"username\",userObject.username);\r",
															"pm.variables.set(\"password\",userObject.password);\r",
															"pm.variables.set(\"newPassword\",userObject.newPassword);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 403 is returned\r",
															"pm.test(\"Response is 403\", function () {\r",
															"   pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"//parse response\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//assert httpStatus\r",
															"pm.test(\"httpStatus is 403\", function () {\r",
															"    pm.expect(responseData.errors[0].httpStatus).to.equal(403);\r",
															"});\r",
															"\r",
															"//assert errorCode\r",
															"pm.test(\"errorCode is notPermitted\", function () {\r",
															"    pm.expect(responseData.errors[0].errorCode).to.equal(\"notPermitted\");\r",
															"});\r",
															"\r",
															"//assert errorMessage\r",
															"pm.test(\"errorMessage is 'Invalid Usertype'\", function () {\r",
															"    pm.expect(responseData.errors[0].errorMessage).to.equal(\"Invalid Usertype\");\r",
															"});\r",
															"\r",
															"//assert source\r",
															"pm.test(\"source is null\", function () {\r",
															"    pm.expect(responseData.errors[0].source).to.be.null;\r",
															"});\r",
															"\r",
															"//assert correlationId\r",
															"pm.test(\"correlationId is not null\", function () {\r",
															"    pm.expect(responseData.errors[0].correlationId).not.to.be.null;\r",
															"});\r",
															"\r",
															"//assert moreInfo\r",
															"pm.test(\"moreInfo is null\", function () {\r",
															"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
															"});\r",
															"\r",
															"//Unset the token and email\r",
															"pm.environment.unset(\"storefrontSiteToken_url\")\r",
															"pm.environment.unset(\"getStorefrontUser\");\r",
															"pm.environment.unset(\"storefrontToken\");\r",
															"pm.environment.unset(\"storefrontSiteToken\");\r",
															"pm.environment.unset(\"newStorefrontToken\");\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"Payer\":{\r\n      \"newPassword\":\"{{newPassword}}\",\r\n      \"existingPassword\":\"{{password}}\"\r\n   }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"customers"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Get Transactions",
					"item": [
						{
							"name": "fulfillmentStatus with Not Shipped_CustomMessage_and_NULL",
							"item": [
								{
									"name": "GET Transactions_WithFulfillment_SF4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//assert 200 is returned\r",
													"pm.test(\"response is 200\", function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseData = pm.response.json();\r",
													"var userObject = JSON.parse(pm.environment.get(\"fulfillmentTransactions\"));\r",
													"\r",
													"// validate CSHN-15934 assertion - GET /transactions should return current fulfillment status\r",
													"\r",
													"//1. If the transaction has fulfillment & Shipping information, then fulfillmentStatusMessage = NOT YET SHIPPED\r",
													"var transLength=responseData.payer.transactions.length\r",
													"for(i=0;i<transLength;i++){\r",
													"    var transactionNumber=responseData.payer.transactions[i].transactionNumber\r",
													"    if(transactionNumber==userObject.transactionNumber[0]){\r",
													"           pm.test(\"TranactionNumber :  \" + userObject.transactionNumber[0] + \" ; status :  \" + userObject.status[0]+ \" ; fulfillmentStatus :  \" + userObject.fulfillmentStatusMessage[0], function () {\r",
													"            pm.expect(responseData.payer.transactions[i].transactionNumber).to.be.equal(userObject.transactionNumber[0]);\r",
													"\t\t\tpm.expect(responseData.payer.transactions[i].fulfillmentStatusMessage).to.be.equal(userObject.fulfillmentStatusMessage[0]);\r",
													"            pm.expect(responseData.payer.transactions[i].status).to.be.equal(userObject.status[0]);\r",
													"        });\r",
													"    }  \r",
													"}\r",
													"\r",
													"//2. If the transaction has fulfillment,NO shipping information. => if custom message is set in 'Receipt Panding Lebel', then fulfillmentStatusMessage = Receipt Pending Label custom message; \r",
													"var transLength=responseData.payer.transactions.length\r",
													"for(i=0;i<transLength;i++){\r",
													"    var transactionNumber=responseData.payer.transactions[i].transactionNumber\r",
													"    if(transactionNumber==userObject.transactionNumber[1]){\r",
													"           pm.test(\"TranactionNumber :  \" + userObject.transactionNumber[1] + \" ; status :  \" + userObject.status[1]+ \" ; fulfillmentStatus :  \" + userObject.fulfillmentStatusMessage[1], function () {\r",
													"            pm.expect(responseData.payer.transactions[i].transactionNumber).to.be.equal(userObject.transactionNumber[1]);\r",
													"\t\t\tpm.expect(responseData.payer.transactions[i].fulfillmentStatusMessage).to.be.equal(userObject.fulfillmentStatusMessage[1]);\r",
													"            pm.expect(responseData.payer.transactions[i].status).to.be.equal(userObject.status[1]);\r",
													"        });\r",
													"    }  \r",
													"}\r",
													"\r",
													"//3. If the transaction has NO fulfillment & NO shipping information,then fulfillmentStatusMessage = null;\r",
													"var transLength=responseData.payer.transactions.length\r",
													"for(i=0;i<transLength;i++){\r",
													"    var transactionNumber=responseData.payer.transactions[i].transactionNumber\r",
													"    if(transactionNumber==userObject.transactionNumber[2]){\r",
													"          pm.test(\"TranactionNumber :  \" + userObject.transactionNumber[2] + \" ; status :  \" + userObject.status[2]+ \" ; fulfillmentStatus :  \" + userObject.fulfillmentStatusMessage[2], function () {\r",
													"            pm.expect(responseData.payer.transactions[i].transactionNumber).to.be.equal(userObject.transactionNumber[2]);\r",
													"\t\t\tpm.expect(responseData.payer.transactions[i].fulfillmentStatusMessage).to.be.equal(userObject.fulfillmentStatusMessage[2]);\r",
													"            pm.expect(responseData.payer.transactions[i].status).to.be.equal(userObject.status[2]);\r",
													"        });\r",
													"    }  \r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"pm.environment.unset(\"getStorefrontUser\");\r",
													"pm.environment.unset(\"storefrontSiteToken\");\r",
													"pm.environment.unset(\"storefrontToken\");\r",
													"pm.environment.unset(\"storefrontSiteToken_url\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//launch storefront with \r",
													"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront4\",\"storefrontVirtual1\");\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{codeVersion}}",
												"api",
												"payer",
												"1.0",
												"transactions"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "fulfillmentStatus with no custom message",
							"item": [
								{
									"name": "GET Transactions_WithFulfillment_SF5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//assert 200 is returned\r",
													"pm.test(\"response is 200\", function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseData = pm.response.json();\r",
													"var userObject = JSON.parse(pm.environment.get(\"fulfillmentTransactions1\"));\r",
													"\r",
													"// validate CSHN-15934 assertion - GET /transactions should return current fulfillment status\r",
													"\r",
													"// If the transaction has fulfillment,NO shipping information. => if custom message is not set, then fulfillmentStatusMessage = Pending\r",
													"var transLength=responseData.payer.transactions.length\r",
													"for(i=0;i<transLength;i++){\r",
													"    var transactionNumber=responseData.payer.transactions[i].transactionNumber\r",
													"    if(transactionNumber==userObject.transactionNumber[0]){\r",
													"           pm.test(\"TranactionNumber :  \" + userObject.transactionNumber[0] + \" ; status :  \" + userObject.status[0]+ \" ; fulfillmentStatus :  \" + userObject.fulfillmentStatusMessage[0], function () {\r",
													"            pm.expect(responseData.payer.transactions[i].transactionNumber).to.be.equal(userObject.transactionNumber[0]);\r",
													"\t\t\tpm.expect(responseData.payer.transactions[i].fulfillmentStatusMessage).to.be.equal(userObject.fulfillmentStatusMessage[0]);\r",
													"        });\r",
													"    }  \r",
													"}\r",
													"\r",
													"pm.environment.unset(\"getStorefrontUser\");\r",
													"pm.environment.unset(\"storefrontSiteToken\");\r",
													"pm.environment.unset(\"storefrontToken\");\r",
													"pm.environment.unset(\"storefrontSiteToken_url\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//launch storefront with \r",
													"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront5\",\"storefrontVirtual4\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{codeVersion}}",
												"api",
												"payer",
												"1.0",
												"transactions"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Post Transactions",
					"item": [
						{
							"name": "Inventory Validation",
							"item": [
								{
									"name": "StoreFront7_Workflow",
									"item": [
										{
											"name": "Lesser Inventory",
											"item": [
												{
													"name": "Create a Transaction with Lesser Inventory",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//clear accss token\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"\r",
																	"//call get token for user and client code\r",
																	"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront7\",\"storefrontVirtual5\");\r",
																	"\r",
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.emailAddress);\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[0]);\r",
																	"pm.variables.set(\"amount\", userObject.amount[0]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 422\r",
																	"pm.test(\"Status code is 422\", function () {\r",
																	"    pm.response.to.have.status(422);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"// parse user data\r",
																	"var userData = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"//assert HttpStatus\r",
																	"pm.test(\"Validate HttpStatus is 422\", function () {\r",
																	"    pm.expect(responseData.errors[0].httpStatus).to.be.equal(422);\r",
																	"});\r",
																	"\r",
																	"//assert ErrorCode\r",
																	"pm.test(\"Validate ErrorCode is 'inventoryNotAvailable'\", function () {\r",
																	"    pm.expect(responseData.errors[0].errorCode).to.be.equal(\"inventoryNotAvailable\");\r",
																	"});\r",
																	"\r",
																	"//assert ErrorMessage\r",
																	"pm.test(\"Validate ErrorMessage is 'The Available Inventory of this item is less than the Minimum Quantity to be Purchased,hence this item \"+userData.itemCode[0]+\" cannot be purchased.'\", function () {\r",
																	"    pm.expect(responseData.errors[0].errorMessage).to.be.equal(\"The Available Inventory of this item is less than the Minimum Quantity to be Purchased,hence this item \"+userData.itemCode[0]+\" cannot be purchased.\");\r",
																	"});\r",
																	"\r",
																	"//assert Source\r",
																	"pm.test(\"Validate Source is null\", function () {\r",
																	"    pm.expect(responseData.errors[0].source).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert MoreInfo\r",
																	"pm.test(\"Validate MoreInfo is null\", function () {\r",
																	"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert CorrelationId\r",
																	"pm.test(\"Validate CorrelationId is not to be null\", function () {\r",
																	"    pm.expect(responseData.errors[0].correlationId).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"//clear access token\r",
																	"//pm.environment.unset(\"accessToken\");\r",
																	"//pm.environment.unset(\"getTokenUser\");\r",
																	"//pm.environment.unset(\"token_url\");\r",
																	"//pm.environment.unset(\"currentUser\");\r",
																	"//pm.environment.unset(\"currentClient\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"payer\":{\r\n      \"emailAddress\":\"{{emailAddress}}\",\r\n      \"lineitems\":[\r\n         {\r\n            \"amount\":{{amount}},\r\n            \"itemCode\":\"{{itemCode}}\",\r\n            \"typeFlag\":\"newCharge\",\r\n            \"quantity\":1,\r\n            \"references\":[\r\n               \r\n            ]\r\n         }\r\n      ],\r\n      \"merchantReferences\":[\r\n         \r\n      ],\r\n      \"payment\":{\r\n         \"amount\":{{amount}},\r\n         \"paymentType\":\"creditCard\",\r\n         \"creditCard\":{\r\n            \"cardNumber\":\"4111111111111111\",\r\n            \"expirationMonth\":12,\r\n            \"expirationYear\":22,\r\n            \"authCode\":\"999\",\r\n            \"zipCode\":\"32606\"\r\n         }\r\n      }\r\n   }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Product by ID to get the Available Quantity",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[0]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is set to 0 \", function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.equals(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Equal Inventory",
											"item": [
												{
													"name": "Create a Transaction with Equal Inventory",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.emailAddress);\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[1]);\r",
																	"pm.variables.set(\"amount\", userObject.amount[1]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 422\r",
																	"pm.test(\"Status code is 422\", function () {\r",
																	"    pm.response.to.have.status(422);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"// parse user data\r",
																	"var userData = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"//assert HttpStatus\r",
																	"pm.test(\"Validate HttpStatus is 422\", function () {\r",
																	"    pm.expect(responseData.errors[0].httpStatus).to.be.equal(422);\r",
																	"});\r",
																	"\r",
																	"//assert ErrorCode\r",
																	"pm.test(\"Validate ErrorCode is 'inventoryNotAvailable'\", function () {\r",
																	"    pm.expect(responseData.errors[0].errorCode).to.be.equal(\"inventoryNotAvailable\");\r",
																	"});\r",
																	"\r",
																	"//assert ErrorMessage\r",
																	"pm.test(\"Validate ErrorMessage is 'The Available Inventory of this item is less than the Minimum Quantity to be Purchased,hence this item \"+userData.itemCode[1]+\" cannot be purchased.'\", function () {\r",
																	"    pm.expect(responseData.errors[0].errorMessage).to.be.equal(\"The Available Inventory of this item is less than the Minimum Quantity to be Purchased,hence this item \"+userData.itemCode[1]+\" cannot be purchased.\");\r",
																	"});\r",
																	"\r",
																	"//assert Source\r",
																	"pm.test(\"Validate Source is null\", function () {\r",
																	"    pm.expect(responseData.errors[0].source).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert MoreInfo\r",
																	"pm.test(\"Validate MoreInfo is null\", function () {\r",
																	"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert CorrelationId\r",
																	"pm.test(\"Validate CorrelationId is not to be null\", function () {\r",
																	"    pm.expect(responseData.errors[0].correlationId).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"//clear access token\r",
																	"//pm.environment.unset(\"accessToken\");\r",
																	"//pm.environment.unset(\"getTokenUser\");\r",
																	"//pm.environment.unset(\"token_url\");\r",
																	"//pm.environment.unset(\"currentUser\");\r",
																	"//pm.environment.unset(\"currentClient\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"payer\":{\r\n      \"emailAddress\":\"{{emailAddress}}\",\r\n      \"lineitems\":[\r\n         {\r\n            \"amount\":{{amount}},\r\n            \"itemCode\":\"{{itemCode}}\",\r\n            \"typeFlag\":\"newCharge\",\r\n            \"quantity\":1,\r\n            \"references\":[\r\n               \r\n            ]\r\n         }\r\n      ],\r\n      \"merchantReferences\":[\r\n        \r\n      ],\r\n      \"payment\":{\r\n         \"amount\":{{amount}},\r\n         \"paymentType\":\"ACH\",\r\n         \"ach\":{\r\n            \"accountName\":\"Tester\",\r\n            \"accountNumber\":\"121212\",\r\n            \"bankAccountType\":\"savings\",\r\n            \"routingNumber\":\"121000248\"\r\n         }\r\n      }\r\n   }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Product by ID to get the Available Quantity",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[1]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is set to 0 \", function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.equals(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Greater Inventory",
											"item": [
												{
													"name": "Get Product by ID to get the Available Quantity before Transaction",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[2]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is not set to 0 \", function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.exist;\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.not.eql(0);\r",
																	"});\r",
																	"\r",
																	"//set availableQuantity\r",
																	"pm.collectionVariables.set(\"availableQuantity\",responseData.payer.availableQuantity);\r",
																	"console.log(pm.collectionVariables.get(\"availableQuantity\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a Transaction with Greater Inventory",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.emailAddress);\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[2]);\r",
																	"pm.variables.set(\"amount\", userObject.amount[1]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"//assert payer object is not empty\r",
																	"pm.test(\"Validate payer object is not empty\", function () {\r",
																	"    pm.expect(responseData.payer).not.to.be.empty;\r",
																	"});\r",
																	"\r",
																	"//assert transactionNumber object is not null\r",
																	"pm.test(\"Validate transactionNumber object is not null\", function () {\r",
																	"    pm.expect(responseData.payer.transactionNumber).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert paidItems array Length\r",
																	"pm.test(\"Validate paidItems array length is 2\", function () {\r",
																	"    pm.expect(responseData.payer.paidItems).to.have.lengthOf(2);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"payer\":{\r\n      \"emailAddress\":\"{{emailAddress}}\",\r\n      \"lineitems\":[\r\n         {\r\n            \"amount\":{{amount}},\r\n            \"itemCode\":\"{{itemCode}}\",\r\n            \"typeFlag\":\"newCharge\",\r\n            \"quantity\":1,\r\n            \"references\":[\r\n               \r\n            ]\r\n         }\r\n      ],\r\n      \"merchantReferences\":[\r\n         \r\n      ],\r\n      \"payment\":{\r\n         \"amount\":{{amount}},\r\n         \"paymentType\":\"creditCard\",\r\n         \"creditCard\":{\r\n            \"cardNumber\":\"4111111111111111\",\r\n            \"expirationMonth\":12,\r\n            \"expirationYear\":22,\r\n            \"authCode\":\"999\",\r\n            \"zipCode\":\"32606\"\r\n         }\r\n      }\r\n   }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Product by ID to get the Available Quantity after Transaction",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[2]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is get reduced after the transaction.Quantity is \"+(pm.collectionVariables.get(\"availableQuantity\")-1), function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.equal(pm.collectionVariables.get(\"availableQuantity\")-1);\r",
																	"});\r",
																	"\r",
																	"//unset availableQuantity\r",
																	"pm.collectionVariables.unset(\"availableQuantity\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "No Minimum Inventory",
											"item": [
												{
													"name": "Get Product by ID to get the Available Quantity before Transaction",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[3]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is not set to 0 \", function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.exist;\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.not.eql(0);\r",
																	"});\r",
																	"\r",
																	"//set availableQuantity\r",
																	"pm.collectionVariables.set(\"availableQuantity\",responseData.payer.availableQuantity);\r",
																	"console.log(pm.collectionVariables.get(\"availableQuantity\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a Transaction with No Minimum Inventory",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.emailAddress);\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[3]);\r",
																	"pm.variables.set(\"amount\", userObject.amount[0]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"//assert payer object is not empty\r",
																	"pm.test(\"Validate payer object is not empty\", function () {\r",
																	"    pm.expect(responseData.payer).not.to.be.empty;\r",
																	"});\r",
																	"\r",
																	"//assert transactionNumber object is not null\r",
																	"pm.test(\"Validate transactionNumber object is not null\", function () {\r",
																	"    pm.expect(responseData.payer.transactionNumber).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert paidItems array Length\r",
																	"pm.test(\"Validate paidItems array length is 2\", function () {\r",
																	"    pm.expect(responseData.payer.paidItems).to.have.lengthOf(2);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"payer\":{\r\n      \"emailAddress\":\"{{emailAddress}}\",\r\n      \"lineitems\":[\r\n         {\r\n            \"amount\":{{amount}},\r\n            \"itemCode\":\"{{itemCode}}\",\r\n            \"typeFlag\":\"newCharge\",\r\n            \"quantity\":1,\r\n            \"references\":[\r\n               \r\n            ]\r\n         }\r\n      ],\r\n      \"merchantReferences\":[\r\n        \r\n      ],\r\n      \"payment\":{\r\n         \"amount\":{{amount}},\r\n         \"paymentType\":\"ACH\",\r\n         \"ach\":{\r\n            \"accountName\":\"Tester\",\r\n            \"accountNumber\":\"121212\",\r\n            \"bankAccountType\":\"savings\",\r\n            \"routingNumber\":\"121000248\"\r\n         }\r\n      }\r\n   }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Product by ID to get the Available Quantity after Transaction",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[3]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is get reduced after the transaction.Quantity is \"+(pm.collectionVariables.get(\"availableQuantity\")-1), function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.equal(pm.collectionVariables.get(\"availableQuantity\")-1);\r",
																	"});\r",
																	"\r",
																	"//unset availableQuantity\r",
																	"pm.collectionVariables.unset(\"availableQuantity\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Multiple Item Lesser Inventory",
											"item": [
												{
													"name": "Get Product by ID to get the Available Quantity before Transaction",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[2]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is not set to 0 \", function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.exist;\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.not.eql(0);\r",
																	"});\r",
																	"\r",
																	"//set availableQuantity\r",
																	"pm.collectionVariables.set(\"availableQuantity\",responseData.payer.availableQuantity);\r",
																	"console.log(pm.collectionVariables.get(\"availableQuantity\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a Transaction with multiple item(Lesser and Greater Inventory)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.emailAddress);\r",
																	"pm.variables.set(\"itemCode1\", userObject.itemCode[0]);\r",
																	"pm.variables.set(\"amount1\", userObject.amount[0]);\r",
																	"pm.variables.set(\"itemCode2\", userObject.itemCode[2]);\r",
																	"pm.variables.set(\"amount2\", userObject.amount[2]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 422\r",
																	"pm.test(\"Status code is 422\", function () {\r",
																	"    pm.response.to.have.status(422);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"// parse user data\r",
																	"var userData = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"//assert HttpStatus\r",
																	"pm.test(\"Validate HttpStatus is 422\", function () {\r",
																	"    pm.expect(responseData.errors[0].httpStatus).to.be.equal(422);\r",
																	"});\r",
																	"\r",
																	"//assert ErrorCode\r",
																	"pm.test(\"Validate ErrorCode is 'inventoryNotAvailable'\", function () {\r",
																	"    pm.expect(responseData.errors[0].errorCode).to.be.equal(\"inventoryNotAvailable\");\r",
																	"});\r",
																	"\r",
																	"//assert ErrorMessage\r",
																	"pm.test(\"Validate ErrorMessage is 'The Available Inventory of this item is less than the Minimum Quantity to be Purchased,hence this item \"+userData.itemCode[0]+\" cannot be purchased.'\", function () {\r",
																	"    pm.expect(responseData.errors[0].errorMessage).to.be.equal(\"The Available Inventory of this item is less than the Minimum Quantity to be Purchased,hence this item \"+userData.itemCode[0]+\" cannot be purchased.\");\r",
																	"});\r",
																	"\r",
																	"//assert Source\r",
																	"pm.test(\"Validate Source is null\", function () {\r",
																	"    pm.expect(responseData.errors[0].source).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert MoreInfo\r",
																	"pm.test(\"Validate MoreInfo is null\", function () {\r",
																	"    pm.expect(responseData.errors[0].moreInfo).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert CorrelationId\r",
																	"pm.test(\"Validate CorrelationId is not to be null\", function () {\r",
																	"    pm.expect(responseData.errors[0].correlationId).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"//clear access token\r",
																	"//pm.environment.unset(\"accessToken\");\r",
																	"//pm.environment.unset(\"getTokenUser\");\r",
																	"//pm.environment.unset(\"token_url\");\r",
																	"//pm.environment.unset(\"currentUser\");\r",
																	"//pm.environment.unset(\"currentClient\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"payer\":{\r\n      \"emailAddress\":\"{{emailAddress}}\",\r\n      \"lineitems\":[\r\n         {\r\n            \"amount\":{{amount1}},\r\n            \"itemCode\":\"{{itemCode1}}\",\r\n            \"typeFlag\":\"newCharge\",\r\n            \"quantity\":1\r\n         },\r\n         {\r\n            \"amount\":{{amount1}},\r\n            \"itemCode\":\"{{itemCode2}}\",\r\n            \"quantity\":1,\r\n            \"typeFlag\":\"newCharge\"\r\n         }\r\n      ],\r\n      \"merchantReferences\":[\r\n         \r\n      ],\r\n      \"payment\":{\r\n         \"amount\":{{amount2}},\r\n         \"paymentType\":\"creditCard\",\r\n         \"creditCard\":{\r\n            \"cardNumber\":\"4111111111111111\",\r\n            \"expirationMonth\":12,\r\n            \"expirationYear\":22,\r\n            \"authCode\":\"999\",\r\n            \"zipCode\":\"32606\"\r\n         }\r\n      }\r\n   }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Product by ID to get the Available Quantity after Transaction",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[2]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is equal after the transaction.Quantity is \"+(pm.collectionVariables.get(\"availableQuantity\")), function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.equal(pm.collectionVariables.get(\"availableQuantity\"));\r",
																	"});\r",
																	"\r",
																	"//unset availableQuantity\r",
																	"pm.collectionVariables.unset(\"availableQuantity\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Product by ID to get the Available Quantity",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[0]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is set to 0 \", function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.equals(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Multiple Item Greater Inventory",
											"item": [
												{
													"name": "Get Product by ID to get the Available Quantity before Transaction for item1",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[2]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is not set to 0 \", function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.exist;\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.not.eql(0);\r",
																	"});\r",
																	"\r",
																	"//set availableQuantity\r",
																	"pm.collectionVariables.set(\"availableQuantity1\",responseData.payer.availableQuantity);\r",
																	"console.log(pm.collectionVariables.get(\"availableQuantity1\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Product by ID to get the Available Quantity before Transaction  for item2",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[3]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is not set to 0 \", function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.exist;\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.not.eql(0);\r",
																	"});\r",
																	"\r",
																	"//set availableQuantity\r",
																	"pm.collectionVariables.set(\"availableQuantity2\",responseData.payer.availableQuantity);\r",
																	"console.log(pm.collectionVariables.get(\"availableQuantity2\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a Transaction with multiple item Available Inventory",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.emailAddress);\r",
																	"pm.variables.set(\"itemCode1\", userObject.itemCode[3]);\r",
																	"pm.variables.set(\"amount1\", userObject.amount[0]);\r",
																	"pm.variables.set(\"itemCode2\", userObject.itemCode[2]);\r",
																	"pm.variables.set(\"amount2\", userObject.amount[2]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"//assert payer object is not empty\r",
																	"pm.test(\"Validate payer object is not empty\", function () {\r",
																	"    pm.expect(responseData.payer).not.to.be.empty;\r",
																	"});\r",
																	"\r",
																	"//assert transactionNumber object is not null\r",
																	"pm.test(\"Validate transactionNumber object is not null\", function () {\r",
																	"    pm.expect(responseData.payer.transactionNumber).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert paidItems array Length\r",
																	"pm.test(\"Validate paidItems array length is 3\", function () {\r",
																	"    pm.expect(responseData.payer.paidItems).to.have.lengthOf(3);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"payer\":{\r\n      \"emailAddress\":\"{{emailAddress}}\",\r\n      \"lineitems\":[\r\n         {\r\n            \"amount\":{{amount1}},\r\n            \"itemCode\":\"{{itemCode1}}\",\r\n            \"typeFlag\":\"newCharge\",\r\n            \"quantity\":1\r\n         },\r\n         {\r\n            \"amount\":{{amount1}},\r\n            \"itemCode\":\"{{itemCode2}}\",\r\n            \"quantity\":1,\r\n            \"typeFlag\":\"newCharge\"\r\n         }\r\n      ],\r\n      \"merchantReferences\":[\r\n         \r\n      ],\r\n      \"payment\":{\r\n         \"amount\":{{amount2}},\r\n         \"paymentType\":\"creditCard\",\r\n         \"creditCard\":{\r\n            \"cardNumber\":\"4111111111111111\",\r\n            \"expirationMonth\":12,\r\n            \"expirationYear\":22,\r\n            \"authCode\":\"999\",\r\n            \"zipCode\":\"32606\"\r\n         }\r\n      }\r\n   }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Product by ID to get the Available Quantity after Transaction for Item 1",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[2]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is get reduced after the transaction.Quantity is \"+(pm.collectionVariables.get(\"availableQuantity1\")-1), function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.equal(pm.collectionVariables.get(\"availableQuantity1\")-1);\r",
																	"});\r",
																	"//unset availableQuantity\r",
																	"pm.collectionVariables.unset(\"availableQuantity1\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Product by ID to get the Available Quantity after Transaction for Item2",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
																	"\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[3]);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"var responseData = pm.response.json();\r",
																	"\r",
																	"//assert availableQuantity\r",
																	"pm.test(\"availableQuantity is get reduced after the transaction.Quantity is \"+(pm.collectionVariables.get(\"availableQuantity2\")-1), function () {\r",
																	"    pm.expect(responseData.payer.availableQuantity).to.be.equal(pm.collectionVariables.get(\"availableQuantity2\")-1);\r",
																	"});\r",
																	"\r",
																	"//unset availableQuantity\r",
																	"pm.collectionVariables.unset(\"availableQuantity2\");\r",
																	"\r",
																	"//Unset the token \r",
																	"pm.environment.unset(\"storefrontSiteToken_url\")\r",
																	"pm.environment.unset(\"getStorefrontUser\");\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"pm.environment.unset(\"storefrontSiteToken\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products/{{itemCode}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"products",
																"{{itemCode}}"
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Fulfillment Status Message Validation",
							"item": [
								{
									"name": "StoreFront9_Workflow",
									"item": [
										{
											"name": "Fulfillment Status Message_NOT YET SHIPPED",
											"item": [
												{
													"name": "Create a Transaction with Fulfillment Status Message - NOT YET SHIPPED",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//clear accss token\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"\r",
																	"//call get token for user and client code\r",
																	"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront9\",\"storefrontVirtual1\");\r",
																	"\r",
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront9\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.email);\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[0]);\r",
																	"pm.variables.set(\"amount\", userObject.amount[0]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront9\"));\r",
																	"\r",
																	"// validate CSHN-16162 - POST /transactions/storefront should return current fulfillment status\r",
																	"\r",
																	"//1. If the item in the transaction has fulfillment & Shipping information, then fulfillmentStatusMessage = NOT YET SHIPPED\r",
																	"var itemsLength=responseData.payer.paidItems.length\r",
																	"for(i=0;i<itemsLength;i++){\r",
																	"    var item=responseData.payer.paidItems[i].itemCode\r",
																	"    if(item==userObject.itemCode[0]){\r",
																	"           pm.test(\" The item code '  \" + userObject.itemCode[0] + \" ' exists in the transaction no ' \" + (responseData.payer.transactionNumber) + \" ' requires Shipping and Fulfillment . Hence this transaciton status is '  \" + userObject.status[0]+ \" ' & fulfillmentStatus Message is -  \" + userObject.fulfillmentStatus[0], function () {\r",
																	"            pm.expect(responseData.payer.paidItems[i].itemCode).to.be.equal(userObject.itemCode[0]);\r",
																	"\t\t\tpm.expect(responseData.payer.fulfillmentStatusMessage).to.be.equal(userObject.fulfillmentStatus[0]);\r",
																	"            pm.expect(responseData.payer.status).to.be.equal(userObject.status[0]);\r",
																	"        });\r",
																	"    }  \r",
																	"}\r",
																	"\r",
																	"//assert Shipping Details\r",
																	"pm.test(\"Validate Shipping Details is not to be null\", function () {\r",
																	"    pm.expect(responseData.payer.shippingDetails).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert Transaction Number is NOT null\r",
																	"pm.test(\"Validate Transaction Number is not to be null\", function () {\r",
																	"    pm.expect(responseData.payer.transactionNumber).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"pm.environment.unset(\"getStorefrontUser\");\r",
																	"pm.environment.unset(\"storefrontSiteToken\");\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"pm.environment.unset(\"storefrontSiteToken_url\");\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"payer\": {\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"lineItems\": [\r\n      {\r\n        \"amount\": {{amount}},\r\n        \"itemCode\": \"{{itemCode}}\",\r\n        \"quantity\": 1,\r\n        \"typeFlag\": \"newCharge\"\r\n      }\r\n    ],\r\n    \"merchantReferences\": [],\r\n    \"payment\": {\r\n      \"amount\": {{amount}},\r\n      \"paymentType\": \"creditCard\",\r\n      \"creditCard\": {\r\n        \"authCode\": \"231\",\r\n        \"cardNumber\": \"4111111111111111\",\r\n        \"expirationMonth\": 12,\r\n        \"expirationYear\": 21,\r\n        \"zipCode\": \"15160\"\r\n      }\r\n    },\r\n    \"shippingDetails\": {\r\n      \"address1\": \"ERIE\",\r\n      \"address2\": null,\r\n      \"address3\": null,\r\n      \"city\": \"ERIE\",\r\n      \"country\": \"United States\",\r\n      \"firstName\": \"SD\",\r\n      \"lastName\": \"SD\",\r\n      \"state\": \"AK\",\r\n      \"zip\": \"15160\"\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Fulfillment Status Message_ONLY FULFILLMENT NO SHIPPING",
											"item": [
												{
													"name": "Create a Transaction with Fulfillment Status Message - ONLY FULFILLMENT NO SHIPPING",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//clear accss token\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"\r",
																	"//call get token for user and client code\r",
																	"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront9\",\"storefrontVirtual1\");\r",
																	"\r",
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront9\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.email);\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[1]);\r",
																	"pm.variables.set(\"amount\", userObject.amount[1]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront9\"));\r",
																	"\r",
																	"// validate CSHN-16162 - POST /transactions/storefront should return current fulfillment status\r",
																	"\r",
																	"//2. If any item in the transaction has fulfillment,NO shipping information. => if custom message is set in 'Receipt Panding Lebel', then fulfillmentStatusMessage = Receipt Pending Label custom message; \r",
																	"var itemsLength=responseData.payer.paidItems.length\r",
																	"for(i=0;i<itemsLength;i++){\r",
																	"    var item=responseData.payer.paidItems[i].itemCode\r",
																	"    if(item==userObject.itemCode[1]){\r",
																	"           pm.test(\" The item code '  \" + userObject.itemCode[1] + \" ' exists in the transaction no ' \" + (responseData.payer.transactionNumber) + \" ' requires Only Fulfillment and No Shipping Address . Hence this transaciton status is '  \" + userObject.status[1]+ \" ' & fulfillmentStatus Message is -  \" + userObject.fulfillmentStatus[1], function () {\r",
																	"            pm.expect(responseData.payer.paidItems[i].itemCode).to.be.equal(userObject.itemCode[1]);\r",
																	"\t\t\tpm.expect(responseData.payer.fulfillmentStatusMessage).to.be.equal(userObject.fulfillmentStatus[1]);\r",
																	"            pm.expect(responseData.payer.status).to.be.equal(userObject.status[1]);\r",
																	"        });\r",
																	"    }  \r",
																	"}\r",
																	"\r",
																	"//assert Shipping Details\r",
																	"pm.test(\"Validate Shipping Details is null\", function () {\r",
																	"    pm.expect(responseData.payer.shippingDetails).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert Transaction Number is NOT null\r",
																	"pm.test(\"Validate Transaction Number is not to be null\", function () {\r",
																	"    pm.expect(responseData.payer.transactionNumber).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"pm.environment.unset(\"getStorefrontUser\");\r",
																	"pm.environment.unset(\"storefrontSiteToken\");\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"pm.environment.unset(\"storefrontSiteToken_url\");\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"payer\": {\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"lineItems\": [\r\n      {\r\n        \"amount\": {{amount}},\r\n        \"itemCode\": \"{{itemCode}}\",\r\n        \"quantity\": 1,\r\n        \"typeFlag\": \"newCharge\"\r\n      }\r\n    ],\r\n    \"merchantReferences\": [],\r\n    \"payment\": {\r\n      \"amount\": {{amount}},\r\n      \"paymentType\": \"creditCard\",\r\n      \"creditCard\": {\r\n        \"authCode\": \"231\",\r\n        \"cardNumber\": \"4111111111111111\",\r\n        \"expirationMonth\": 12,\r\n        \"expirationYear\": 21,\r\n        \"zipCode\": \"15160\"\r\n      }\r\n    }   \r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Fulfillment Status Message_null",
											"item": [
												{
													"name": "Create a Transaction with Fulfillment Status Message - null",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//clear accss token\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"\r",
																	"//call get token for user and client code\r",
																	"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront9\",\"storefrontVirtual1\");\r",
																	"\r",
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront9\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.email);\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[2]);\r",
																	"pm.variables.set(\"amount\", userObject.amount[2]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront9\"));\r",
																	"\r",
																	"// validate CSHN-16162 - POST /transactions/storefront should return current fulfillment status\r",
																	"\r",
																	"//3. If the transaction has NO fulfillment & NO shipping information,then fulfillmentStatusMessage = null;\r",
																	"var itemsLength=responseData.payer.paidItems.length\r",
																	"for(i=0;i<itemsLength;i++){\r",
																	"    var item=responseData.payer.paidItems[i].itemCode\r",
																	"    if(item==userObject.itemCode[2]){\r",
																	"           pm.test(\" The item code '  \" + userObject.itemCode[2] + \" ' exists in the transaction no ' \" + (responseData.payer.transactionNumber) + \" ' does not require Shipping and Fulfillment . Hence this transaciton status is '  \" + userObject.status[2]+ \" ' & fulfillmentStatus Message is -  \" + userObject.fulfillmentStatus[2], function () {\r",
																	"            pm.expect(responseData.payer.paidItems[i].itemCode).to.be.equal(userObject.itemCode[2]);\r",
																	"\t\t\tpm.expect(responseData.payer.fulfillmentStatusMessage).to.be.equal(userObject.fulfillmentStatus[2]);\r",
																	"            pm.expect(responseData.payer.status).to.be.equal(userObject.status[2]);\r",
																	"        });\r",
																	"    }  \r",
																	"}\r",
																	"\r",
																	"//assert Shipping Details\r",
																	"pm.test(\"Validate Shipping Details is null\", function () {\r",
																	"    pm.expect(responseData.payer.shippingDetails).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert Transaction Number is NOT null\r",
																	"pm.test(\"Validate Transaction Number is not to be null\", function () {\r",
																	"    pm.expect(responseData.payer.transactionNumber).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"pm.environment.unset(\"getStorefrontUser\");\r",
																	"pm.environment.unset(\"storefrontSiteToken\");\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"pm.environment.unset(\"storefrontSiteToken_url\");\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"payer\": {\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"lineItems\": [\r\n      {\r\n        \"amount\": {{amount}},\r\n        \"itemCode\": \"{{itemCode}}\",\r\n        \"quantity\": 1,\r\n        \"typeFlag\": \"newCharge\"\r\n      }\r\n    ],\r\n    \"merchantReferences\": [],\r\n    \"payment\": {\r\n      \"amount\": {{amount}},\r\n      \"paymentType\": \"creditCard\",\r\n      \"creditCard\": {\r\n        \"authCode\": \"231\",\r\n        \"cardNumber\": \"4111111111111111\",\r\n        \"expirationMonth\": 12,\r\n        \"expirationYear\": 21,\r\n        \"zipCode\": \"15160\"\r\n      }\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Fulfillment Status Message_PENDING",
											"item": [
												{
													"name": "Create a Transaction with Fulfillment Status Message - PENDING",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//clear accss token\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"\r",
																	"//call get token for user and client code\r",
																	"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront10\",\"storefrontVirtual4\");\r",
																	"\r",
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront10\"));\r",
																	"\r",
																	"//set itemcode and amount collection variables\r",
																	"pm.variables.set(\"emailAddress\", userObject.email);\r",
																	"pm.variables.set(\"itemCode\", userObject.itemCode[0]);\r",
																	"pm.variables.set(\"amount\", userObject.amount[0]);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//assert 200 is returned\r",
																	"pm.test(\"response is 200\", function () {\r",
																	"   pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"//parse response\r",
																	"var responseData = pm.response.json();\r",
																	"console.log(responseData);\r",
																	"\r",
																	"// parse user data\r",
																	"var userObject = JSON.parse(pm.environment.get(\"StoreFront10\"));\r",
																	"\r",
																	"// validate CSHN-16162 - POST /transactions/storefront should return current fulfillment status\r",
																	"\r",
																	"//4. If the item in transaction has fulfillment,NO shipping information. => if custom message is not set, then fulfillmentStatusMessage = PENDING\r",
																	"var itemsLength=responseData.payer.paidItems.length\r",
																	"for(i=0;i<itemsLength;i++){\r",
																	"    var item=responseData.payer.paidItems[i].itemCode\r",
																	"    if(item==userObject.itemCode[0]){\r",
																	"           pm.test(\" The item code '  \" + userObject.itemCode[0] + \" ' exists in the transaction no ' \" + (responseData.payer.transactionNumber) + \" '    require fulfillment only and no shipping. Hence this transaciton status is '  \" + userObject.status[0]+ \" ' . Since no custom text set in 'Receipt Pending Label' and so fulfillmentStatus Message is -  \" + userObject.fulfillmentStatus[0], function () {\r",
																	"            pm.expect(responseData.payer.paidItems[i].itemCode).to.be.equal(userObject.itemCode[0]);\r",
																	"\t\t\tpm.expect(responseData.payer.fulfillmentStatusMessage).to.be.equal(userObject.fulfillmentStatus[0]);\r",
																	"            pm.expect(responseData.payer.status).to.be.equal(userObject.status[0]);\r",
																	"        });\r",
																	"    }  \r",
																	"}\r",
																	"\r",
																	"//assert Shipping Details\r",
																	"pm.test(\"Validate Shipping Details is null\", function () {\r",
																	"    pm.expect(responseData.payer.shippingDetails).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//assert Transaction Number is NOT null\r",
																	"pm.test(\"Validate Transaction Number is not to be null\", function () {\r",
																	"    pm.expect(responseData.payer.transactionNumber).not.to.be.null;\r",
																	"});\r",
																	"\r",
																	"pm.environment.unset(\"getStorefrontUser\");\r",
																	"pm.environment.unset(\"storefrontSiteToken\");\r",
																	"pm.environment.unset(\"storefrontToken\");\r",
																	"pm.environment.unset(\"storefrontSiteToken_url\");\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"payer\": {\r\n    \"emailAddress\": \"{{emailAddress}}\",\r\n    \"lineItems\": [\r\n      {\r\n        \"amount\": {{amount}},\r\n        \"itemCode\": \"{{itemCode}}\",\r\n        \"quantity\": 1,\r\n        \"typeFlag\": \"newCharge\"\r\n      }\r\n    ],\r\n    \"merchantReferences\": [],\r\n    \"payment\": {\r\n      \"amount\": {{amount}},\r\n      \"paymentType\": \"creditCard\",\r\n      \"creditCard\": {\r\n        \"authCode\": \"231\",\r\n        \"cardNumber\": \"4111111111111111\",\r\n        \"expirationMonth\": 12,\r\n        \"expirationYear\": 21,\r\n        \"zipCode\": \"15160\"\r\n      }\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/transactions/storefront",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{codeVersion}}",
																"api",
																"payer",
																"1.0",
																"transactions",
																"storefront"
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Signout",
			"item": [
				{
					"name": "Post Signout_Switch Token",
					"item": [
						{
							"name": "POST authToken_Login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// parse user data\r",
											"var userObject = JSON.parse(pm.environment.get(\"StoreFront6\"));\r",
											"\r",
											"// set body variable\r",
											"pm.variables.set(\"virtualdirectory\", pm.environment.get(\"storefrontVirtual1\"));\r",
											"pm.variables.set(\"username\", userObject.username);\r",
											"pm.variables.set(\"password\", userObject.password);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//assert 200 is returned\r",
											"pm.test(\"response is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"storefrontToken\",responseData.access_token);\r",
											"pm.environment.set(\"refreshToken\",responseData.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"virtualdirectory\": \"{{virtualdirectory}}\",\r\n  \"grant_type\": \"storefront\",\r\n  \"username\":\"{{username}}\",\r\n  \"password\":\"{{password}}\",\r\n  \"preview\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{codeVersion}}/api/auth/1.0/token",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{codeVersion}}",
										"api",
										"auth",
										"1.0",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET customers/storefront_Authenticated",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//assert 200 is returned\r",
											"pm.test(\"response is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseData = pm.response.json();\r",
											"var userObject = JSON.parse(pm.environment.get(\"StoreFront6\"));\r",
											"\r",
											"//assert firstName\r",
											"pm.test(\"firstName equals \"+ userObject.firstName, function () {\r",
											"    pm.expect(responseData.payer.firstName).to.equal(userObject.firstName);\r",
											"});\r",
											"\r",
											"//assert lastName\r",
											"pm.test(\"lastName equals \"+ userObject.lastName, function () {\r",
											"    pm.expect(responseData.payer.lastName).to.equal(userObject.lastName);\r",
											"});\r",
											"\r",
											"//assert custCode\r",
											"pm.test(\"custCode equals \"+ userObject.custCode, function () {\r",
											"    pm.expect(responseData.payer.custCode).to.equal(userObject.custCode);\r",
											"});\r",
											"\r",
											"//assert email\r",
											"pm.test(\"email is \" + userObject.email, function () {\r",
											"    pm.expect(responseData.payer.email).to.equal(userObject.email);\r",
											"});\r",
											"\r",
											"//assert logintype\r",
											"pm.test(\"logintype equals \" + userObject.logintype, function () {\r",
											"    pm.expect(responseData.payer.loginType).to.equal(userObject.logintype);\r",
											"});\r",
											"\r",
											"//assert mustChangePasswordFlag\r",
											"pm.test(\"mustChangePasswordFlag is false\", function () {\r",
											"    pm.expect(responseData.payer.mustChangePasswordFlag).to.be.false;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers/storefront",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{codeVersion}}",
										"api",
										"payer",
										"1.0",
										"customers",
										"storefront"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signout_Verify 422 error code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//assert 422 is returned\r",
											"pm.test(\"response is 422\", function () {\r",
											"   pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var responseData = pm.response.json();\r",
											"var userObject = JSON.parse(pm.environment.get(\"StoreFront6\"));\r",
											"\r",
											"//assert httpStatus\r",
											"pm.test(\"httpStatus equals \" + userObject.httpStatus, function ()  {\r",
											"      pm.expect(responseData.errors[0].httpStatus).to.equal(userObject.httpStatus);\r",
											"});\r",
											"\r",
											"//assert errorCode\r",
											"pm.test(\"errorCode equals \" + userObject.errorCode, function ()  {\r",
											"      pm.expect(responseData.errors[0].errorCode).to.equal(userObject.errorCode);\r",
											"});\r",
											"\r",
											"//assert errorMessage\r",
											"pm.test(\"errorMessage equals \" + userObject.errorMessage, function ()  {\r",
											"      pm.expect(responseData.errors[0].errorMessage).to.equal(userObject.errorMessage);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"refresh_token\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/signout",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{codeVersion}}",
										"api",
										"payer",
										"1.0",
										"signout"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//assert 200 is returned\r",
											"pm.test(\"response is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseData = pm.response.json();\r",
											"\r",
											"//assert refresh_token is not null\r",
											"pm.test(\"refresh_token is not null\", function () {\r",
											"      pm.expect(responseData.refresh_token).to.not.be.null;\r",
											"});\r",
											"\r",
											"//assert token_type is not null\r",
											"pm.test(\"token_type is not null\", function () {\r",
											"      pm.expect(responseData.token_type).to.not.be.null;\r",
											"});\r",
											"\r",
											"//assert expires_in is not null\r",
											"pm.test(\"expires_in is not null\", function () {\r",
											"      pm.expect(responseData.expires_in).to.not.be.null;\r",
											"});\r",
											"\r",
											"//assert ccess_token\" is not null\r",
											"pm.test(\"access_token is not null\", function () {\r",
											"      pm.expect(responseData.access_token).to.not.be.null;\r",
											"});\r",
											"\r",
											"//unset old token\r",
											"pm.environment.unset(\"refreshToken\");\r",
											"pm.environment.unset(\"storefrontToken\");\r",
											"\r",
											"//store access_token/refresh_token in collectionVariables\r",
											"pm.collectionVariables.set(\"newAccess_token\",responseData.access_token);\r",
											"pm.collectionVariables.set(\"newRefreshToken\",responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"refresh_token\": \"{{refreshToken}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/signout",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{codeVersion}}",
										"api",
										"payer",
										"1.0",
										"signout"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET customers/storefront_Unauthenticated",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//assert 200 is returned\r",
											"pm.test(\"response is 200\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseData = pm.response.json();\r",
											"var userObject = JSON.parse(pm.environment.get(\"StoreFront6\"));\r",
											"\r",
											"//assert firstName\r",
											"pm.test(\"firstName is not null\", function () {\r",
											"      pm.expect(responseData.firstName).to.not.be.null;\r",
											"});\r",
											"\r",
											"//assert lastName\r",
											"pm.test(\"lastName is not null\", function () {\r",
											"      pm.expect(responseData.lastName).to.not.be.null;\r",
											"});\r",
											"\r",
											"//assert custCode\r",
											"pm.test(\"custCode equals \"+ userObject.guestcustCode, function () {\r",
											"    pm.expect(responseData.payer.custCode).to.equal(userObject.guestcustCode);\r",
											"});\r",
											"\r",
											"//assert email\r",
											"pm.test(\"email is not null\", function () {\r",
											"      pm.expect(responseData.email).to.not.be.null;\r",
											"});\r",
											"\r",
											"//assert logintype\r",
											"pm.test(\"logintype equals \" + userObject.guestlogintype, function () {\r",
											"    pm.expect(responseData.payer.loginType).to.equal(userObject.guestlogintype);\r",
											"});\r",
											"\r",
											"//assert mustChangePasswordFlag\r",
											"pm.test(\"mustChangePasswordFlag is false\", function () {\r",
											"    pm.expect(responseData.payer.mustChangePasswordFlag).to.be.false;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newAccess_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/customers/storefront",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{codeVersion}}",
										"api",
										"payer",
										"1.0",
										"customers",
										"storefront"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signout_Verify 401 error code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//assert 200 is returned\r",
											"pm.test(\"response is 401\", function () {\r",
											"   pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"var responseData = pm.response.json();\r",
											"var userObject = JSON.parse(pm.environment.get(\"StoreFront6\"));\r",
											"\r",
											"//assert httpStatus\r",
											"pm.test(\"httpStatus equals \" + userObject.HttpStatus1, function ()  {\r",
											"      pm.expect(responseData.HttpStatus).to.equal(userObject.HttpStatus1);\r",
											"});\r",
											"\r",
											"//assert errorCode\r",
											"pm.test(\"errorCode equals \" + userObject.ErrorCode1, function ()  {\r",
											"      pm.expect(responseData.ErrorCode).to.equal(userObject.ErrorCode1);\r",
											"});\r",
											"\r",
											"//assert errorMessage\r",
											"pm.test(\"errorMessage equals \" + userObject.ErrorMessage1, function ()  {\r",
											"      pm.expect(responseData.ErrorMessage).to.equal(userObject.ErrorMessage1);\r",
											"});\r",
											"\r",
											"//unset\r",
											"pm.collectionVariables.unset(\"newAccess_token\");\r",
											"pm.collectionVariables.unset(\"newRefreshToken\");\r",
											"pm.environment.unset(\"getStorefrontUser\");\r",
											"pm.environment.unset(\"storefrontSiteToken_url\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newAccess_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"refresh_token\": \"{{newRefreshToken}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/signout",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{codeVersion}}",
										"api",
										"payer",
										"1.0",
										"signout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get Products",
					"item": [
						{
							"name": "Verify Out of Stock",
							"item": [
								{
									"name": "StoreFront7_Workflow",
									"item": [
										{
											"name": "Get Product list to get the Out of Stock",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//clear accss token\r",
															"pm.environment.unset(\"storefrontToken\");\r",
															"\r",
															"//call get token for user and client code\r",
															"eval(pm.environment.get(\"getStorefrontUser\"))(\"StoreFront7\",\"storefrontVirtual5\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"//assert 200 is returned\r",
															"pm.test(\"response is 200\", function () {\r",
															"   pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseData = pm.response.json();\r",
															"\r",
															"//parse user data\r",
															"var userObject = JSON.parse(pm.environment.get(\"StoreFront7\"));\r",
															"\r",
															"//assert outOfStock is false for Greater Quantity\r",
															"for(var i=0; i < responseData.payer.products.length; ++i){\r",
															"    //get the itemCode\r",
															"    var itemCode = responseData.payer.products[i].itemCode;\r",
															"        //if item code equals user item code, break\r",
															"        if (itemCode  === (userObject.itemCode[2])){\r",
															"           pm.test(\"Item Code 'outOfStock' is false for item : \"+userObject.itemCode[2], function () {\r",
															"            pm.expect(responseData.payer.products[i].outOfStock).to.be.false;\r",
															"        });\r",
															"            \r",
															"    break;\r",
															"    }\r",
															"}\r",
															"\r",
															"//assert outOfStock is false for No minimum Inventory\r",
															"for(var i=0; i < responseData.payer.products.length; ++i){\r",
															"    //get the itemCode\r",
															"    var itemCode = responseData.payer.products[i].itemCode;\r",
															"        //if item code equals user item code, break\r",
															"        if (itemCode  === (userObject.itemCode[3])){\r",
															"           pm.test(\"Item Code 'outOfStock' is false for item : \"+userObject.itemCode[3], function () {\r",
															"            pm.expect(responseData.payer.products[i].outOfStock).to.be.false;\r",
															"        });\r",
															"            \r",
															"    break;\r",
															"    }\r",
															"}\r",
															"\r",
															"//assert outOfStock is true for Lesser Inventory\r",
															"for(var i=0; i < responseData.payer.products.length; ++i){\r",
															"    //get the itemCode\r",
															"    var itemCode = responseData.payer.products[i].itemCode;\r",
															"        //if item code equals user item code, break\r",
															"        if (itemCode  === (userObject.itemCode[0])){\r",
															"           pm.test(\"Item Code 'outOfStock' is true for item : \"+userObject.itemCode[0], function () {\r",
															"            pm.expect(responseData.payer.products[i].outOfStock).to.be.true;\r",
															"        });\r",
															"            \r",
															"    break;\r",
															"    }\r",
															"}\r",
															"\r",
															"//assert outOfStock is true for Equal Inventory\r",
															"for(var i=0; i < responseData.payer.products.length; ++i){\r",
															"    //get the itemCode\r",
															"    var itemCode = responseData.payer.products[i].itemCode;\r",
															"        //if item code equals user item code, break\r",
															"        if (itemCode  === (userObject.itemCode[1])){\r",
															"           pm.test(\"Item Code 'outOfStock' is true for item : \"+userObject.itemCode[1], function () {\r",
															"            pm.expect(responseData.payer.products[i].outOfStock).to.be.true;\r",
															"        });\r",
															"            \r",
															"    break;\r",
															"    }\r",
															"}\r",
															"\r",
															"//assert outOfStock is true for Less Inventory and Less minimum quantity\r",
															"for(var i=0; i < responseData.payer.products.length; ++i){\r",
															"    //get the itemCode\r",
															"    var itemCode = responseData.payer.products[i].itemCode;\r",
															"        //if item code equals user item code, break\r",
															"        if (itemCode  === (userObject.itemCode[4])){\r",
															"           pm.test(\"Item Code 'outOfStock' is true for item : \"+userObject.itemCode[4], function () {\r",
															"            pm.expect(responseData.payer.products[i].outOfStock).to.be.true;\r",
															"        });\r",
															"            \r",
															"    break;\r",
															"    }\r",
															"}\r",
															"\r",
															"//assert outOfStock is false for the quantity not supported item\r",
															"for(var i=0; i < responseData.payer.products.length; ++i){\r",
															"    //get the itemCode\r",
															"    var itemCode = responseData.payer.products[i].itemCode;\r",
															"        //if item code equals user item code, break\r",
															"        if (itemCode  === (userObject.itemCode[5])){\r",
															"           pm.test(\"Item Code 'outOfStock' is false for item : \"+userObject.itemCode[5], function () {\r",
															"            pm.expect(responseData.payer.products[i].outOfStock).to.be.false;\r",
															"        });\r",
															"            \r",
															"    break;\r",
															"    }\r",
															"}\r",
															"\r",
															"//Unset the token \r",
															"pm.environment.unset(\"storefrontSiteToken_url\")\r",
															"pm.environment.unset(\"getStorefrontUser\");\r",
															"pm.environment.unset(\"storefrontToken\");\r",
															"pm.environment.unset(\"storefrontSiteToken\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/{{codeVersion}}/api/payer/1.0/products",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{codeVersion}}",
														"api",
														"payer",
														"1.0",
														"products"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "customMessages",
					"item": [
						{
							"name": "customMessages with value",
							"item": [
								{
									"name": "GET settings/storefront_Unauthenticated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//assert 200 is returned\r",
													"pm.test(\"response is 200\", function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseData = pm.response.json();\r",
													"var userObject = JSON.parse(pm.environment.get(\"auto10_storefront_sitesettings\"));\r",
													"\r",
													"//assert allowedFramingHosts\r",
													"pm.test(\"allowedFramingHosts is empty array\", function () {\r",
													"    pm.expect(responseData.storefront.allowedFramingHosts).to.have.empty;\r",
													"});\r",
													"\r",
													"//assert clientCode\r",
													"pm.test(\"clientCode equals to \"+ userObject.clientCode, function () {\r",
													"    pm.expect(responseData.storefront.clientCode).to.equal(userObject.clientCode);\r",
													"});\r",
													"\r",
													"//assert logoPath\r",
													"pm.test(\"logoPath is null\", function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.logoPath).to.be.null;\r",
													"});\r",
													"\r",
													"//assert schoolName\r",
													"pm.test(\"schoolName equal to \" + userObject.schoolName, function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.schoolName).to.equal(userObject.schoolName);\r",
													"});\r",
													"\r",
													"//assert timeZone\r",
													"pm.test(\"timeZone equals to \" + userObject.timeZone, function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.timeZone).to.equal(userObject.timeZone);\r",
													"});\r",
													"\r",
													"//assert timeoutValue\r",
													"pm.test(\"timeoutValue equals to \"+ userObject.timeoutValue, function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.timeoutValue).to.equal(userObject.timeoutValue);\r",
													"});\r",
													"\r",
													"//assert incompleteSignoutURL\r",
													"pm.test(\"incompleteSignoutURL equal to \"+ userObject.incompleteSignoutURL, function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.incompleteSignoutURL).to.equal(userObject.incompleteSignoutURL);\r",
													"});\r",
													"\r",
													"//assert signoutURL\r",
													"pm.test(\"signoutURL equal to \"+ userObject.signoutURL, function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.signoutURL).to.equal(userObject.signoutURL);\r",
													"});\r",
													"\r",
													"//assert disabledFlag\r",
													"pm.test(\"disabledFlag is \" + userObject.disabledFlag, function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.disabledFlag).to.equal(userObject.disabledFlag);\r",
													"});\r",
													"\r",
													"//assert codeVersion\r",
													"pm.test(\"codeVersion equals to \"+ userObject.codeVersion, function () {\r",
													"    pm.expect(responseData.storefront.codeVersion).to.equal(userObject.codeVersion);\r",
													"});\r",
													"\r",
													"//assert customMessages\r",
													"pm.test(\"customMessages is null\", function () {\r",
													"    pm.expect(responseData.storefront.customMessages.newChargeHeaderMessage).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.receiptSignoutInstructions).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.receiptSignoutButton).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.referencesHeaderMessage).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.referencesTrailerMessage).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.signOnBodyMessage).to.be.null;\r",
													"});\r",
													"\r",
													"//assert outOfStockMessage\r",
													"pm.test(\"outOfStockMessage customMessages equal to \" + userObject.outOfStockMessage, function () {\r",
													"    pm.expect(responseData.storefront.customMessages.outOfStockMessage).to.equal(userObject.outOfStockMessage);\r",
													"});\r",
													"\r",
													"//assert globalMessage\r",
													"pm.test(\"globalMessage customMessages equal to \" + userObject.globalMessage, function () {\r",
													"    pm.expect(responseData.storefront.customMessages.globalMessage).to.equal(userObject.globalMessage);\r",
													"});\r",
													"\r",
													"//assert pageHeaderMessage\r",
													"pm.test(\"pageHeaderMessage customMessages equal to \" + userObject.pageHeaderMessage, function () {\r",
													"    pm.expect(responseData.storefront.customMessages.pageHeaderMessage).to.equal(userObject.pageHeaderMessage);\r",
													"});\r",
													"\r",
													"//assert calculateTaxAfterDiscountFlag\r",
													"pm.test(\"calculateTaxAfterDiscountFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.calculateTaxAfterDiscountFlag).to.equal(userObject.calculateTaxAfterDiscountFlag);\r",
													"});\r",
													"\r",
													"//assert enableCaptchaFlag\r",
													"pm.test(\"enableCaptchaFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.enableCaptchaFlag).to.equal(userObject.enableCaptchaFlag);\r",
													"});\r",
													"\r",
													"//assert serviceChargeMayApplyFlag\r",
													"pm.test(\"serviceChargeMayApplyFlag is true\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.serviceChargeMayApplyFlag).to.equal(userObject.serviceChargeMayApplyFlag);\r",
													"});\r",
													"\r",
													"//assert showDisclaimerMessagingFlag\r",
													"pm.test(\"showDisclaimerMessagingFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.showDisclaimerMessagingFlag).to.equal(userObject.showDisclaimerMessagingFlag);\r",
													"});\r",
													"\r",
													"//assert skipReceiptFlag\r",
													"pm.test(\"skipReceiptFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.skipReceiptFlag).to.equal(userObject.skipReceiptFlag);\r",
													"});\r",
													"\r",
													"//assert usesSmartPayFlag\r",
													"pm.test(\"usesSmartPayFlag is true\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.usesSmartPayFlag).to.equal(userObject.usesSmartPayFlag);\r",
													"});\r",
													"\r",
													"//assert usesDiscountsFlag\r",
													"pm.test(\"usesDiscountsFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.usesDiscountsFlag).to.equal(userObject.usesDiscountsFlag);\r",
													"});\r",
													"\r",
													"//assert loginOptions\r",
													"pm.test(\"loginOptions equal to \" + userObject.loginOptions, function () {\r",
													"    pm.expect(responseData.storefront.loginOptions).to.equal(userObject.loginOptions);\r",
													"});\r",
													"\r",
													"//assert merchantReferences\r",
													"pm.test(\"merchantReferences is empty array\", function () {\r",
													"    pm.expect(responseData.storefront.merchantReferences).to.have.empty;\r",
													"});\r",
													"\r",
													"//assert offlineMessage\r",
													"pm.test(\"offlineMessage equal to \" + userObject.offlineMessage, function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.offlineMessage).to.equal(userObject.offlineMessage);\r",
													"});\r",
													"\r",
													"//assert siteOfflineFlag\r",
													"pm.test(\" siteOffline equal to \" + userObject.siteOfflineFlag, function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.siteOfflineFlag).to.equal(userObject.siteOfflineFlag);\r",
													"});\r",
													"\r",
													"//assert siteOnlineDateTime\r",
													"pm.test(\"siteOnlineDateTime is null \", function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.siteOnlineDateTime).to.equal(userObject.siteOnlineDateTime);\r",
													"});\r",
													"\r",
													"//assert privacyStatementUrl\r",
													"pm.test(\"privacyStatementUrl is null \" , function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.siteOnlineDateTime).to.equal(userObject.siteOnlineDateTime);\r",
													"});\r",
													"\r",
													"//assert serverTime\r",
													"pm.test(\"serverTime is not null \" , function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.siteOnlineDateTime).to.have.null;\r",
													"});\r",
													"\r",
													"//assert accentColor\r",
													"pm.test(\"accentColor equal to \" + userObject.accentColor, function () {\r",
													"    pm.expect(responseData.storefront.theme.colors.accentColor).to.equal(userObject.accentColor);\r",
													"});\r",
													"\r",
													"//assert logoBackgroundColor\r",
													"pm.test(\"accentColor equal to \" + userObject.logoBackgroundColor, function () {\r",
													"    pm.expect(responseData.storefront.theme.colors.logoBackgroundColor).to.equal(userObject.logoBackgroundColor);\r",
													"});\r",
													"\r",
													"//assert schoolPrimaryColor\r",
													"pm.test(\"schoolPrimaryColor equal to \" + userObject.schoolPrimaryColor, function () {\r",
													"    pm.expect(responseData.storefront.theme.colors.schoolPrimaryColor).to.equal(userObject.schoolPrimaryColor);\r",
													"});\r",
													"\r",
													"//assert storeBannerImages\r",
													"pm.test(\"storeBannerImages is empty array\", function () {\r",
													"    pm.expect(responseData.storefront.theme.storeBannerImages).to.have.empty;\r",
													"});\r",
													"\r",
													"//assert virtualDirectory\r",
													"pm.test(\"virtualDirectory equal to \" + userObject.virtualDirectory, function () {\r",
													"    pm.expect(responseData.storefront.virtualDirectory).to.equal(userObject.virtualDirectory);\r",
													"});\r",
													"\r",
													"//unset the variables used\r",
													"pm.environment.unset(\"getStorefrontUser\");\r",
													"pm.environment.unset(\"storefrontSiteToken\");\r",
													"pm.environment.unset(\"storefrontToken\");\r",
													"pm.environment.unset(\"storefrontSiteToken_url\");\r",
													"pm.collectionVariables.unset(\"access_token\");\r",
													"pm.environment.unset(\"refreshToken\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/{{codeVersion}}/api/storefront/1.0/settings?virtualdirectory={{storefrontVirtual1}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{codeVersion}}",
												"api",
												"storefront",
												"1.0",
												"settings"
											],
											"query": [
												{
													"key": "virtualdirectory",
													"value": "{{storefrontVirtual1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "customMessages with null value",
							"item": [
								{
									"name": "GET settings/storefront_Unauthenticated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//assert 200 is returned\r",
													"pm.test(\"response is 200\", function () {\r",
													"   pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseData = pm.response.json();\r",
													"var userObject = JSON.parse(pm.environment.get(\"auto10_storefront_sitesettings\"));\r",
													"\r",
													"//assert allowedFramingHosts\r",
													"pm.test(\"allowedFramingHosts is empty array\", function () {\r",
													"    pm.expect(responseData.storefront.allowedFramingHosts).to.have.empty;\r",
													"});\r",
													"\r",
													"//assert clientCode\r",
													"pm.test(\"clientCode equals to \"+ userObject.clientCode, function () {\r",
													"    pm.expect(responseData.storefront.clientCode).to.equal(userObject.clientCode);\r",
													"});\r",
													"\r",
													"//assert logoPath\r",
													"pm.test(\"logoPath is null\", function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.logoPath).to.be.null;\r",
													"});\r",
													"\r",
													"//assert schoolName\r",
													"pm.test(\"schoolName equal to \" + userObject.schoolName, function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.schoolName).to.equal(userObject.schoolName);\r",
													"});\r",
													"\r",
													"//assert timeZone\r",
													"pm.test(\"timeZone equals to \" + userObject.timeZone, function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.timeZone).to.equal(userObject.timeZone);\r",
													"});\r",
													"\r",
													"//assert timeoutValue\r",
													"pm.test(\"timeoutValue equals to \"+ userObject.timeoutValue, function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.timeoutValue).to.equal(userObject.timeoutValue);\r",
													"});\r",
													"\r",
													"//assert incompleteSignoutURL\r",
													"pm.test(\"incompleteSignoutURL is empty\", function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.incompleteSignoutURL).to.equal(\"\");\r",
													"});\r",
													"\r",
													"//assert signoutURL\r",
													"pm.test(\"signoutURL is empty\", function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.signoutURL).to.equal(\" \");\r",
													"});\r",
													"\r",
													"//assert disabledFlag\r",
													"pm.test(\"disabledFlag is true\", function () {\r",
													"    pm.expect(responseData.storefront.clientDetails.disabledFlag).to.equal(userObject.disabledFlag1);\r",
													"});\r",
													"\r",
													"//assert codeVersion\r",
													"pm.test(\"codeVersion equals to \"+ userObject.codeVersion, function () {\r",
													"    pm.expect(responseData.storefront.codeVersion).to.equal(userObject.codeVersion);\r",
													"});\r",
													"\r",
													"//assert customMessages\r",
													"pm.test(\"customMessages is null\", function () {\r",
													"    pm.expect(responseData.storefront.customMessages.newChargeHeaderMessage).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.receiptSignoutInstructions).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.receiptSignoutButton).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.referencesHeaderMessage).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.referencesTrailerMessage).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.signOnBodyMessage).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.globalMessage).to.be.null;\r",
													"    pm.expect(responseData.storefront.customMessages.pageHeaderMessage).to.be.null;\r",
													"});\r",
													"\r",
													"//assert outOfStockMessage\r",
													"pm.test(\"outOfStockMessage customMessages equal to \" + userObject.outOfStockMessage1, function () {\r",
													"    pm.expect(responseData.storefront.customMessages.outOfStockMessage).to.equal(userObject.outOfStockMessage1);\r",
													"});\r",
													"\r",
													"//assert calculateTaxAfterDiscountFlag\r",
													"pm.test(\"calculateTaxAfterDiscountFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.calculateTaxAfterDiscountFlag).to.equal(userObject.calculateTaxAfterDiscountFlag);\r",
													"});\r",
													"\r",
													"//assert enableCaptchaFlag\r",
													"pm.test(\"enableCaptchaFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.enableCaptchaFlag).to.equal(userObject.enableCaptchaFlag);\r",
													"});\r",
													"\r",
													"//assert serviceChargeMayApplyFlag\r",
													"pm.test(\"serviceChargeMayApplyFlag is true\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.serviceChargeMayApplyFlag).to.equal(userObject.serviceChargeMayApplyFlag);\r",
													"});\r",
													"\r",
													"//assert showDisclaimerMessagingFlag\r",
													"pm.test(\"showDisclaimerMessagingFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.showDisclaimerMessagingFlag).to.equal(userObject.showDisclaimerMessagingFlag);\r",
													"});\r",
													"\r",
													"//assert skipReceiptFlag\r",
													"pm.test(\"skipReceiptFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.skipReceiptFlag).to.equal(userObject.skipReceiptFlag);\r",
													"});\r",
													"\r",
													"//assert usesSmartPayFlag\r",
													"pm.test(\"usesSmartPayFlag is true\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.usesSmartPayFlag).to.equal(userObject.usesSmartPayFlag);\r",
													"});\r",
													"\r",
													"//assert usesDiscountsFlag\r",
													"pm.test(\"usesDiscountsFlag is false\", function () {\r",
													"    pm.expect(responseData.storefront.featureFlags.usesDiscountsFlag).to.equal(userObject.usesDiscountsFlag);\r",
													"});\r",
													"\r",
													"//assert loginOptions\r",
													"pm.test(\"loginOptions equal to \" + userObject.loginOptions, function () {\r",
													"    pm.expect(responseData.storefront.loginOptions).to.equal(userObject.loginOptions);\r",
													"});\r",
													"\r",
													"//assert merchantReferences\r",
													"pm.test(\"merchantReferences is empty array\", function () {\r",
													"    pm.expect(responseData.storefront.merchantReferences).to.have.empty;\r",
													"});\r",
													"\r",
													"//assert offlineMessage\r",
													"pm.test(\"offlineMessage equal to \" + userObject.offlineMessage, function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.offlineMessage).to.equal(userObject.offlineMessage);\r",
													"});\r",
													"\r",
													"//assert siteOfflineFlag\r",
													"pm.test(\"siteOfflineFlag equal to \" + userObject.siteOfflineFlag, function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.siteOfflineFlag).to.equal(userObject.siteOfflineFlag);\r",
													"});\r",
													"\r",
													"//assert siteOnlineDateTime\r",
													"pm.test(\"siteOnlineDateTime is null \", function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.siteOnlineDateTime).to.equal(userObject.siteOnlineDateTime);\r",
													"});\r",
													"\r",
													"//assert privacyStatementUrl\r",
													"pm.test(\"privacyStatementUrl is null \" , function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.siteOnlineDateTime).to.equal(userObject.siteOnlineDateTime);\r",
													"});\r",
													"\r",
													"//assert serverTime\r",
													"pm.test(\"serverTime is not null \" , function () {\r",
													"    pm.expect(responseData.storefront.offlineDetails.siteOnlineDateTime).to.have.null;\r",
													"});\r",
													"\r",
													"//assert accentColor\r",
													"pm.test(\"accentColor equal to \" + userObject.accentColor, function () {\r",
													"    pm.expect(responseData.storefront.theme.colors.accentColor).to.equal(userObject.accentColor);\r",
													"});\r",
													"\r",
													"//assert logoBackgroundColor\r",
													"pm.test(\"accentColor equal to \" + userObject.logoBackgroundColor, function () {\r",
													"    pm.expect(responseData.storefront.theme.colors.logoBackgroundColor).to.equal(userObject.logoBackgroundColor);\r",
													"});\r",
													"\r",
													"//assert schoolPrimaryColor\r",
													"pm.test(\"schoolPrimaryColor equal to \" + userObject.schoolPrimaryColor, function () {\r",
													"    pm.expect(responseData.storefront.theme.colors.schoolPrimaryColor).to.equal(userObject.schoolPrimaryColor);\r",
													"});\r",
													"\r",
													"//assert storeBannerImages\r",
													"pm.test(\"storeBannerImages is empty array\", function () {\r",
													"    pm.expect(responseData.storefront.theme.storeBannerImages).to.have.empty;\r",
													"});\r",
													"\r",
													"//assert virtualDirectory\r",
													"pm.test(\"virtualDirectory equal to \" + userObject.virtualDirectory1, function () {\r",
													"    pm.expect(responseData.storefront.virtualDirectory).to.equal(userObject.virtualDirectory1);\r",
													"});\r",
													"\r",
													"//unset the variables used\r",
													"pm.environment.unset(\"getStorefrontUser\");\r",
													"pm.environment.unset(\"storefrontSiteToken\");\r",
													"pm.environment.unset(\"storefrontToken\");\r",
													"pm.environment.unset(\"storefrontSiteToken_url\");\r",
													"pm.collectionVariables.unset(\"access_token\");\r",
													"pm.environment.unset(\"refreshToken\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/{{codeVersion}}/api/storefront/1.0/settings?virtualdirectory={{storefrontVirtual6}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{codeVersion}}",
												"api",
												"storefront",
												"1.0",
												"settings"
											],
											"query": [
												{
													"key": "virtualdirectory",
													"value": "{{storefrontVirtual6}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{storefrontToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//clear site and storefront token",
					"pm.environment.unset(\"storefrontSiteToken\");",
					"//pm.environment.unset(\"storefrontToken\");",
					"",
					"// create URL for Token Request",
					"pm.environment.set(\"storefrontSiteToken_url\", pm.environment.get(\"host\") + \"/\" + pm.environment.get(\"codeVersion\") + \"/\" + pm.environment.get(\"storefrontToken_api_base\"));",
					"",
					"pm.environment.set(\"getStorefrontUser\", `(user,virtual) => {",
					" ",
					"\t//get  username and virutal directory",
					"    var user = JSON.parse(pm.environment.get(user));",
					"    var virtual = pm.environment.get(virtual);",
					"\t",
					"    if (user.username){",
					"        var username = user.username;",
					"\t    var password = user.password;",
					"",
					"        pm.sendRequest({",
					"            url: pm.environment.get(\"host\") + \"/\" + pm.environment.get(\"codeVersion\") + \"/\" + pm.environment.get(\"token_api_base\"),",
					"            method: 'POST',",
					"            header: {",
					"                'content-type': 'application/json',",
					"            },",
					"            body: JSON.stringify({virtualdirectory:virtual, grant_type:\"storefront\",username:username,password:password, preview: false})",
					"        }, function (err, res) {",
					"            //assert 200 is returned",
					"            pm.test(\"Post User Token is 200\", function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"            });",
					"            //pause for next call",
					"            setTimeout(function () { }, pm.environment.get(\"timeout\"));",
					"            pm.environment.set(\"storefrontToken\", res.json().access_token);",
					"        });",
					"    }",
					"    else {",
					"        pm.sendRequest({",
					"        url: pm.environment.get(\"storefrontSiteToken_url\"),",
					"        method: 'POST',",
					"        header: {",
					"            'content-type': 'application/json',",
					"            'X-Clientkey': pm.environment.get(\"StoreFrontKey\")",
					"        },",
					"        body: JSON.stringify({virtual:virtual})",
					"        }, function (err, res) {",
					"            //assert 200 is returned",
					"            pm.test(\"Post Site Token is 201\", function () {",
					"                pm.expect(res).to.have.property('code', 201);",
					"            });",
					"            //pause for next call",
					"            setTimeout(function () { }, pm.environment.get(\"timeout\"));",
					"            console.log(res.json().tempToken);",
					"            pm.environment.set(\"storefrontSiteToken\", res.json().tempToken);",
					"            pm.sendRequest({",
					"                url: pm.environment.get(\"host\") + \"/\" + pm.environment.get(\"codeVersion\") + \"/\" + pm.environment.get(\"token_api_base\"),",
					"                method: 'POST',",
					"                header: {",
					"                    'content-type': 'application/json',",
					"                },",
					"                body: JSON.stringify({ temptoken:pm.environment.get(\"storefrontSiteToken\"), virtualdirectory:virtual, grant_type:\"storefront\",preview: false})",
					"            }, function (err, res) {",
					"                //assert 200 is returned",
					"                pm.test(\"Post User Token is 200\", function () {",
					"                    pm.expect(res).to.have.property('code', 200);",
					"                });",
					"                //pause for next call",
					"                setTimeout(function () { }, pm.environment.get(\"timeout\"));",
					"                pm.environment.set(\"storefrontToken\", res.json().access_token);",
					"            });",
					"",
					"});",
					"};",
					"}`);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "newStorefronToken",
			"value": ""
		}
	]
}